// <auto-generated />
using System;
using Infrastructure.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(SJGTestContext))]
    [Migration("20230328164013_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Order.Domain.Model.Detail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("Detail", (string)null);
                });

            modelBuilder.Entity("Core.Order.Domain.Model.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("Core.Product.Domain.Model.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDrink")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFries")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSandwich")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("357a5f62-89f9-4e68-80e1-a94be2fc06d3"),
                            Created = new DateTime(2023, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDrink = false,
                            IsFries = false,
                            IsSandwich = true,
                            Name = "X Burguer",
                            Price = 5.0
                        },
                        new
                        {
                            Id = new Guid("264fd9cd-ec97-44d0-840d-f67962d3761c"),
                            Created = new DateTime(2023, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDrink = false,
                            IsFries = false,
                            IsSandwich = true,
                            Name = "X Egg",
                            Price = 4.5
                        },
                        new
                        {
                            Id = new Guid("8d26a9b2-774a-467b-a3ad-4f59bcc75bd2"),
                            Created = new DateTime(2023, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDrink = false,
                            IsFries = false,
                            IsSandwich = true,
                            Name = "X Bacon",
                            Price = 7.0
                        },
                        new
                        {
                            Id = new Guid("eb673ac1-9dfb-46a0-815e-115dcb078668"),
                            Created = new DateTime(2023, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDrink = false,
                            IsFries = true,
                            IsSandwich = false,
                            Name = "Fries",
                            Price = 2.0
                        },
                        new
                        {
                            Id = new Guid("51928c2f-2587-4489-8b81-b4291232c7ea"),
                            Created = new DateTime(2023, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDrink = true,
                            IsFries = false,
                            IsSandwich = false,
                            Name = "Soft Drink",
                            Price = 2.5
                        });
                });

            modelBuilder.Entity("Core.Order.Domain.Model.Detail", b =>
                {
                    b.HasOne("Core.Order.Domain.Model.Order", null)
                        .WithMany("Details")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Product.Domain.Model.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Order.Domain.Model.Order", b =>
                {
                    b.Navigation("Details");
                });
#pragma warning restore 612, 618
        }
    }
}
